#!/usr/bin/env node
let colCount;
let rowCount;
let colorCount
// Get process.stdin as the standard input object.
var standard_input = process.stdin;

// Set input character encoding.
standard_input.setEncoding('utf-8');

// Prompt user to input data in console.
console.log("Print columns count");

// When user input data and click enter key.
let counter = 0;
let colorCounter =0;
let leftCount = 0;
standard_input.on('data', function (data) {
  // User input exit.
  if (counter === 0 ){
    console.log('Columns count :' + data);
    console.log('Print rows count');
    colCount = parseInt(data);
    colorCount = new Array(colCount)
    counter++
  }
  else if (counter === 1){
    console.log('Rows count :' + data);
    console.log('Print colors')
    rowCount = data;
    counter++
  } else if(counter >= 2 && counter <= colCount + 1 ){

    if ((data.length - 1) == rowCount){
        console.log(counter)
      colorCount[leftCount] = data
      console.log(colCount[leftCount])
      leftCount++;
      counter++
    }
    else {
      console.log("data length is: " + data.length - 1)
      console.log("rowCount is: " + rowCount);

      console.log("enough \\ not enough arguments or something went wrong");
      process.exit()
    }
  }
  else{
    // Print user input in console.
    console.log("sent!");
    /**
     * Module dependencies.
     */

    var app = require('../app');
    var debug = require('debug')('flood-it:server');
    var http = require('http');

    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '3002');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
      var port = parseInt(val, 10);

      if (isNaN(port)) {
        // named pipe
        return val;
      }

      if (port >= 0) {
        // port number
        return port;
      }

      return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
      if (error.syscall !== 'listen') {
        throw error;
      }

      var bind = typeof port === 'string'
          ? 'Pipe ' + port
          : 'Port ' + port;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
      var addr = server.address();
      var bind = typeof addr === 'string'
          ? 'pipe ' + addr
          : 'port ' + addr.port;
      debug('Listening on ' + bind);
    }
    app.use({

        columns: colCount,
            rows: rowCount,
            colors: colorCount

    })
    // }
    // export ieldParams =
  }
});


